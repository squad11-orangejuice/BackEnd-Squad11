{
	"info": {
		"_postman_id": "55a15d11-c030-45f3-b1e6-2a959ad557f6",
		"name": "Orange Portfolio",
		"description": "Documentação da API do Orange Portfolio construída pelo Squad 11 do Orange Hackathon.\n\nPor convenção do grupo essa API foi construída utilizando Node.js e express.js e tem as funções de criar usuário, login via formulário e login social, logout, página descobrir, meu portfólio, criar, editar, ver e deletar um projeto específico.\n\nUtilizamos a bcrypt para encriptar as senhas dos usuários e o jwt para gerar os tokens de autenticação.\n\nPara os dados utilizamos o Sequelize como ORM.\n\n**Link do deploy:** [<b>https://testeojsqd11repooriginal.onrender.com</b>](https://testeojsqd11repooriginal.onrender.com)\n\n#### Grupo\n\nAlanna Silva\n\nCarolina Rocha Floro\n\nDouglas dos Santos Oliveira\n\nWelen Almeida",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28474070",
		"_collection_link": "https://red-meteor-397249.postman.co/workspace/squad11-orange~9fc1bbaf-422b-4d03-a882-0b91d24e28b0/collection/28474070-55a15d11-c030-45f3-b1e6-2a959ad557f6?action=share&source=collection_link&creator=28474070"
	},
	"item": [
		{
			"name": "Rotas públicas",
			"item": [
				{
					"name": "Cadastro",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"nome\": \"fulana\",\r\n\t\"sobrenome\": \"pereira\",\r\n\t\"email\": \"fulaninha@email.com\",\r\n\t\"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/usuario/cadastrar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"cadastrar"
							]
						},
						"description": "Cria um novo usuário através de um POST request . Recebe no body um JSON com os dados obrigatórios \"nome\", \"sobrenome\", \"email\" e \"password\".\n\n### Request Body\n\n- `nome`: (string) The first name of the user.\n- `sobrenome`: (string) The last name of the user.\n- `email`: (string) The email address of the user.\n- `password`: (string) The password for the user account.\n    \n\n### Response\n\nEm caso de sucesso retorna o status code 201 com uma resposta em JSON.\n\nExemplo:\n\n``` json\n{\n    \"mensagem\": \"Cadastro feito com sucesso!\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Login Google",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"bearer_token\", response.token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"sub\": \"23443226\",\r\n    \"given_name\": \"fulano\",\r\n\t\"family_name\": \"da silva\",\r\n\t\"email\": \"fulano@email.com\",\r\n    \"avatar\": \"linkdoavatarfornecidopelogoogle\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/usuario/login/google",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"login",
								"google"
							]
						},
						"description": "### User Login via Google\n\nPermite que usuário faça login através do Google.\n\nCaso ainda não seja cadastrado, gera um novo cadastro com os dados recebidos no body.\n\nCaso seja cadastrado mas não tenha avatar, insere o avatar no cadastro atual.\n\nTodos os dados abaixo são obrigatórios.\n\n#### Request Body\n\n- `sub` (string): Google sub ID.\n- `given_name` (string): Nome.\n- `family_name` (string): Sobrenome.\n- `email` (string): E-mail do usuário.\n- `avatar` (string): Link do avatar fornecido pelo Google.\n    \n\n#### Response\n\nRetorna status code 200 e JSON com nome, sobrenome, link do avatar e token de autenticação.\n\nExample:\n\n``` json\n{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.collectionVariables.set(\"bearer_token\", response.token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"fulaninha@email.com\",\r\n\t\"password\": \"12345678\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/usuario/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"login"
							]
						},
						"description": "### Login\n\nAutenticar um usuário e gerar um token para acessar recursos protegidos.\n\n#### Request Body\n\n- `email` (string, obrigatório): e-mail do usuário já cadastrado.\n- `password` (string, obrigatório): senha do usuário já cadastrado.\n    \n\n#### Resposta\n\n- Status: 200 OK\n- Content-Type: json\n- `token` (string): bearer token."
					},
					"response": []
				}
			],
			"description": "##### Rotas de cadastro e login que podem ser acessadas por qualquer usuário."
		},
		{
			"name": "Rotas privadas",
			"item": [
				{
					"name": "Logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/usuario/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuario",
								"logout"
							]
						},
						"description": "Recebe o bearer token e invalida o token, realizando o logout do usuário.  \n  \nEm caso de sucesso retorna o status code 200 sem resposta no body."
					},
					"response": []
				},
				{
					"name": "Descobrir",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/descobrir",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"descobrir"
							]
						},
						"description": "Rota GET para retornar todos os projetos cadastrados, ordenados do mais recente para o mais antigo.\n\nA resposta em caso de sucesso será status code 200 e um JSON com um array de objetos contendo os seguintes dados:\n\n- \"titulo\",\n- \"link\",\n- \"descricao\",\n- \"imagem\" (link para o arquivo no bucket que abre no navegador),\n- \"data\",\n- \"user\" (com id, nome, sobrenome e link do avatar do usuário que criou o projeto),\n    \n- \"tags\" (array com id e nome das tags associadas ao projeto)\n    \n\n**Exemplo de retorno:**\n\n``` json\n[\n    {\n        \"id\": 51,\n        \"titulo\": \"Nina e Mirela\",\n        \"link\": \"link.com\",\n        \"descricao\": \"wafoknlkawnf\",\n        \"imagem\": \"https://squad11-orange-fcamara.s3.sa-east-1.amazonaws.com/1-20240131192103132-blob\",\n        \"data\": \"2024-01-31T19:21:03.684Z\",\n        \"user\": {\n            \"id\": 1,\n            \"nome\": \"carol\",\n            \"sobrenome\": \"rocha\",\n            \"avatar\": null\n        },\n        \"tags\": [\n            {\n                \"id\": 13,\n                \"nome\": \"UX\"\n            }\n        ]\n    }]\n\n ```"
					},
					"response": []
				},
				{
					"name": "Meu portfólio",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/portfolio",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"portfolio"
							]
						},
						"description": "Rota GET para retornar todos os projetos pertencentes ao usuário cadastrado a serem exibidos na página \"Meu portfólio\", ordenados do mais recente para o mais antigo.\n\nA resposta em caso de sucesso será status code 200 e um JSON com um array de objetos contendo os seguintes dados:\n\n- \"titulo\",\n- \"link\",\n- \"descricao\",\n- \"imagem\" (link para o arquivo no bucket que abre no navegador),\n- \"data\",\n- \"user\" (com id, nome, sobrenome e link do avatar do usuário que criou o projeto),\n    \n- \"tags\" (array com tags associadas ao projeto)\n    \n\n``` json\nExemplo de retorno:\n[\n    {\n        \"id\": 52,\n        \"titulo\": \"Novo teste\",\n        \"link\": \"link.com\",\n        \"descricao\": \"Descrição do projeto\",\n        \"imagem\": \"https://squad11-orange-fcamara.s3.sa-east-1.amazonaws.com/4-20240201165444601\",\n        \"data\": \"2024-02-01T16:54:45.087Z\",\n        \"user\": {\n            \"id\": 4,\n            \"nome\": \"fulano\",\n            \"sobrenome\": \"da silva\",\n            \"avatar\": \"linkdoavatarfornecidopelogoogle\"\n        },\n        \"tags\": [\n            {\n                \"id\": 1,\n                \"nome\": \"tag1\"\n            },\n            {\n                \"id\": 2,\n                \"nome\": \"tag2\"\n            }\n        ]\n    }\n]\n\n ```"
					},
					"response": []
				},
				{
					"name": "Novo projeto",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "titulo",
									"value": "Novo teste",
									"type": "text"
								},
								{
									"key": "link",
									"value": "link.com",
									"description": "Link para acesso ao projeto cadastrado.",
									"type": "text"
								},
								{
									"key": "descricao",
									"value": "Descrição do projeto",
									"type": "text"
								},
								{
									"key": "imagem",
									"description": "Imagem em JPEG ou PNG do projeto com a proporção de 644 x 421",
									"type": "file",
									"src": "postman-cloud:///1eec060d-6229-4c90-9698-8647db35865f"
								},
								{
									"key": "tags[]",
									"value": "tag1",
									"description": "Array de strings com as tags. É obrigatoria no mínimo 1 tag.",
									"type": "text"
								},
								{
									"key": "tags[]",
									"value": "tag2",
									"type": "text"
								},
								{
									"key": "tags[]",
									"value": "tag teste",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/projeto/novo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projeto",
								"novo"
							]
						},
						"description": "Rota POST para criar um novo projeto. Recebe os dados via multipart form-data e retorna em caso de sucesso status code 201 e a mensagem \"Projeto criado\".\n\nTodos os dados são obrigatórios, inclusive o arquivo e pelo menos uma tag.\n\nO arquivo deve ser em formato JPEG ou PNG.\n\nAntes de associar as tags ao projeto o controller verifica e cria apenas as tags que ainda não existem para evitar duplicidade.\n\nAo ser enviada para o bucket a imagem é renomeada, recebendo o id do usuário e a data de upload."
					},
					"response": []
				},
				{
					"name": "Editar projeto",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "titulo",
									"value": "Título do projeto",
									"type": "text"
								},
								{
									"key": "link",
									"value": "link.com",
									"description": "Link para acesso ao projeto cadastrado.",
									"type": "text"
								},
								{
									"key": "descricao",
									"value": "Descrição do projeto",
									"type": "text"
								},
								{
									"key": "imagem",
									"description": "Imagem em JPEG ou PNG do projeto com a proporção de 644 x 421",
									"type": "file",
									"src": "postman-cloud:///1eebf8f6-4706-44a0-8e80-00d31da049e7"
								},
								{
									"key": "tags",
									"value": "tag1,tag2,tag3",
									"description": "Array de strings com as tags. É obrigatoria no mínimo 1 tag.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/projeto/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projeto",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "Id do projeto a ser editado."
								}
							]
						},
						"description": "Rota PUT para editar um projeto específico. Recebe a id do projeto via URL, verifica se o projeto de fato pertence ao usuário e recebe os dados abaixo via multipart form-data.\n\nTodos os dados são opcionais.\n\nDeleta as tags antes associadas e cria novas associações com as tags recebidas.\n\nCaso seja enviada uma nova imagem, a imagem anterior é deletada do bucket."
					},
					"response": []
				},
				{
					"name": "Ver projeto",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/projeto/show/52",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projeto",
								"show",
								"52"
							]
						},
						"description": "Rota GET para visualizar um projeto específico. Recebe o id do projeto como parâmetro na URL e bearer token no head e retorna os dados do projeto solicitado.\n\nÉ possível ver qualquer projeto cadastrado independente da autoria.  \n  \nEm caso de sucesso retorna status code 200 e um JSON conforme exemplo abaixo:\n\n``` json\nExemplo de retorno:\n\n{\n    \"id\": 52,\n    \"titulo\": \"Novo teste\",\n    \"link\": \"link.com\",\n    \"descricao\": \"Descrição do projeto\",\n    \"imagem\": \"https://squad11-orange-fcamara.s3.sa-east-1.amazonaws.com/4-20240201165444601\",\n    \"data\": \"2024-02-01T16:54:45.087Z\",\n    \"user\": {\n        \"id\": 4,\n        \"nome\": \"fulano\",\n        \"sobrenome\": \"da silva\",\n        \"avatar\": \"linkdoavatarfornecidopelogoogle\"\n    },\n    \"tags\": [\n        {\n            \"id\": 1,\n            \"nome\": \"tag1\"\n        },\n        {\n            \"id\": 2,\n            \"nome\": \"tag2\"\n        }\n    ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Deletar projeto",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/projeto/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"projeto",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "52",
									"description": "Id do projeto a ser deletado."
								}
							]
						},
						"description": "Rota DELETE para deletar um projeto específico. Recebe o id do projeto como parâmetro via url e bearer token no head.\n\nPassa pelo middleware para verificar se o projeto percente ao usuário logado.\n\nDeleta os dados do projeto do banco de dados e a foto do bucket.\n\nEm caso de sucesso retorna status code 200."
					},
					"response": []
				}
			],
			"description": "##### Rotas que passam pelo middleware de autenticação do usuário logando, recebendo obrigatoriamente um bearer token."
		}
	]
}